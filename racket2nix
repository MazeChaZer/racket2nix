#! /usr/bin/env racket
#lang racket

(require pkg/lib)

(define *ep (current-error-port))
(define never-dependency-names '("racket"))
(define always-build-inputs '("racket"))
(define terminal-package-names '("racket-lib"))

(define header-template #<<EOM
{ pkgs ? import <nixpkgs> {}
, stdenv ? pkgs.stdenv
, fetchurl ? pkgs.fetchurl
, racket ? pkgs.racket
, racket-lib ? racket
, unzip ? pkgs.unzip
}:


EOM
  )

(define derivation-template #<<EOM
stdenv.mkDerivation rec {
  name = "~a";
  src = fetchurl {
    url = "~a";
    sha1 = "~a";
  };

  buildInputs = [ unzip ~a ];
  circularBuildInputs = [ ~a ];

  unpackPhase = "unzip $src -d $name";

  dontBuild = true;

  racket-cmd = "${racket.out}/bin/racket -G $out/etc/racket -U -X $out/share/racket/collects";
  raco = "${racket-cmd} -N raco -l- raco";

  passAsFile = [ "racketConfig" ];

  racketConfig = ''
#hash(
  (share-dir . "$out/share/racket")
  (links-search-files . ( "$out/share/racket" ~a ))
  (pkgs-search-dirs . ( "$out/share/racket/pkgs" ~a ))
  (collects-search-dirs . ( "$out/share/racket/collects" ~a ))
  (absolute-installation . #t)
  (installation-name . ".")
)
  '';

  installPhase = ''
    mkdir -p $out/etc/racket $out/share/racket
    sed -e 's|$out|'"$out|g" > $out/etc/racket/config.rktd < $racketConfigPath
    echo ${racket-cmd}

    # install and link us
    if ${racket-cmd} -e "(require pkg/lib) (exit (if (member \"$name\" (installed-pkg-names #:scope (bytes->path (string->bytes/utf-8 \"${_racket-lib.out}/share/racket/pkgs\")))) 0 1))"; then
      ${raco} pkg install --no-setup --copy --deps fail --fail-fast --scope installation ./$name
    fi
  '';
}
EOM
  )

(define (derivation name url sha1 dependency-names circular-dependency-names)
  (define build-inputs
    (string-join
      (append always-build-inputs
        (for/list ((name dependency-names))
          (format "_~a" name)))))
  (define circular-build-inputs
    (string-join
      (for/list ((name circular-dependency-names))
        (format "_~a" name))))
  (define link-dirs
    (string-join
      (for/list ((name dependency-names))
                (format "\"${_~a.out}/share/racket\"" name))))
  (define pkgs-dirs
    (string-join
      (for/list ((name dependency-names))
                (format "\"${_~a.out}/share/racket/pkgs\"" name))))
  (define collects-dirs
    (string-join
      (for/list ((name dependency-names))
                (format "\"${_~a.out}/share/racket/collects\"" name))))

  (format derivation-template name url sha1 build-inputs circular-build-inputs
          link-dirs pkgs-dirs collects-dirs))

(define (header) header-template)

(define (memo-lookup-package package-dictionary package-name)
  (hash-ref! package-dictionary package-name
             (lambda ()
               (define package (hash-copy (get-pkg-details-from-catalogs package-name)))
               (define dependency-names (map dependency-name (hash-ref package 'dependencies)))
               (hash-set! package 'dependencies
                          (remove* never-dependency-names dependency-names))
               package)))

(define (dependency-name pair-or-string)
  (if (pair? pair-or-string)
      (car pair-or-string)
      pair-or-string))

(define (names->let-deps names package-dictionary)
  (define terminal-derivations
    (for/list ((name terminal-package-names))
      (format "  _~a = ~a;" name name)))
  (define derivations
    (for/list ((name (remove* terminal-package-names names)))
      (format "  _~a = ~a;" name (name->derivation name package-dictionary))))
  (define derivations-on-lines
    (string-join (append terminal-derivations derivations) (format "~n")))
  (format "let~n~a~nin~n" derivations-on-lines))

(define (name->transitive-dependency-names package-name package-dictionary (breadcrumbs '()))
  (when (member package-name breadcrumbs)
    (raise-argument-error 'name->transitive-dependency-names
                          "not supposed to be a circular dependency"
                          0 package-name breadcrumbs))

  (define package (memo-lookup-package package-dictionary package-name))

  (hash-ref!
   package
   'transitive-dependency-names
   (lambda ()
     (cond
       [(member package-name terminal-package-names) (list package-name)]
       [else
        (display (format "evaluating deps of ~a~n" package-name) *ep)
        (define new-crumbs (cons package-name breadcrumbs))
        (define dependency-names
          (package->transitive-dependency-names package package-dictionary new-crumbs))
        (display (format "deps of ~a: ~a~n" package-name dependency-names) *ep)
        dependency-names]))))

(define (package->transitive-dependency-names package package-dictionary breadcrumbs)
  (define name (hash-ref package 'name))
  (define raw-dependency-names (hash-ref package 'dependencies))

  (define noncircular-parents (remove* raw-dependency-names breadcrumbs))
  (define circular-parents (remove* noncircular-parents breadcrumbs))

  (define dependency-names (remove* circular-parents raw-dependency-names))

  (hash-set! package 'circular-dependencies circular-parents)
  (hash-set! package 'dependencies dependency-names)

  (define name-lists
    (for/list ((name dependency-names))
      (name->transitive-dependency-names name package-dictionary breadcrumbs)))
  (append (remove-duplicates (append* name-lists)) (list name)))

(define (name->derivation package-name package-dictionary)
  (define package (memo-lookup-package package-dictionary package-name))
  (display (format "Create derivation for ~a~n" package-name) *ep)
  (package->derivation package package-dictionary))

(define (package->derivation package package-dictionary)
  (define name (hash-ref package 'name))
  (define url (hash-ref package 'source))
  (define sha1 (hash-ref package 'checksum))
  (define dependency-names (hash-ref package 'dependencies))
  (define circular-dependency-names (hash-ref package 'circular-dependencies))
  (define trans-dep-names
    (remove-duplicates
     (append*
      (for/list ((name dependency-names))
        (name->transitive-dependency-names name package-dictionary)))))
  (derivation name url sha1 trans-dep-names circular-dependency-names))

(define (name->let-deps-and-reference package-name (package-dictionary (make-hash)))
  (define package-names (name->transitive-dependency-names package-name package-dictionary))
  (define package-definitions (names->let-deps package-names package-dictionary))
  (string-append package-definitions (format "_~a~n" package-name)))

(define package-name (read-line (current-input-port) 'any))
(display (string-append (header) (name->let-deps-and-reference package-name)))
