#! /usr/bin/env racket
#lang racket
(require pkg/lib)

(define header-template #<<EOM
{ pkgs ? import <nixpkgs> {}
, stdenv ? pkgs.stdenv
, fetchurl ? pkgs.fetchurl
, racket ? pkgs.racket
, racket-lib ? racket
, unzip ? pkgs.unzip
}:


EOM
)

(define install-dep-template #<<EOM
    raco pkg install --skip-installed --deps fail --scope-dir $out/share/racket/pkgs ${~a.out}/share/racket/pkgs/~a
EOM
)

(define (install-dep dep-name)
  (format install-dep-template dep-name dep-name))

(define derivation-template #<<EOM
stdenv.mkDerivation rec {
  name = "~a";
  src = fetchurl {
    url = "~a";
    sha1 = "~a";
  };

  buildInputs = [ unzip ~a ];

  unpackPhase = "unzip $src -d $name";

  dontBuild = true;

  inherit racket;

  installPhase = ''
    # TODO: Tell racket not to keep a collection path in \$HOME/.racket
    export PLTUSERHOME=\$PWD

    # Install deps
~a
    raco pkg install --copy --deps fail --scope-dir $out/share/racket/pkgs ./$name
  '';
}
EOM
)

(define (header) header-template)

(define (memo-lookup-package package-dictionary package-name)
  (hash-ref! package-dictionary package-name
             (lambda () (hash-copy (get-pkg-details-from-catalogs package-name)))))

(define (dependency-name pair-or-string)
  (if (pair? pair-or-string)
      (car pair-or-string)
      pair-or-string))

(define (dependency-names->let-deps unfiltered-dependency-names package-dictionary)
  (let [(dependency-names (remove* '("racket-lib")  ; This is bootstrapped in racket itself
                                   unfiltered-dependency-names))]
    (cond
      [(null? dependency-names) ""]
      [#t
       (display (format "dependency names: ~a~n" dependency-names) (current-error-port))
       (format
        "let~n~a~nin~n"
        (string-join
         (let loop [(rest-dependency-names dependency-names)
                    (let-deps '())]
           (if (null? rest-dependency-names)
               let-deps
               (let [(name (car rest-dependency-names))
                     (next-rest-dependency-names (cdr rest-dependency-names))]
                 (let [(next-let-deps (cons
                                       (format "  ~a = ~a;" name (name->derivation-and-deps name package-dictionary))
                                       let-deps))]
                   (loop next-rest-dependency-names next-let-deps)))))
         (format "~n")))])))

(define (name->transitive-dependency-names package-name package-dictionary)
  (let [(package (memo-lookup-package package-dictionary package-name))]
    (hash-ref! package 'transitive-dependency-names
               (lambda () (package->transitive-dependency-names package package-dictionary)))))

(define (package->transitive-dependency-names package package-dictionary)
  (let [(name (hash-ref package 'name))]
    (cond [(equal? "racket-lib" name) `(,name)]
          [#t
           (let [(dependency-names (remove* '("racket")
                                        (map dependency-name
                                             (hash-ref package 'dependencies))))]
             (display (format "direct deps of ~a: ~a~n" name dependency-names) (current-error-port))
             (apply append
                    (append (map (lambda (name) (name->transitive-dependency-names name package-dictionary))
                                 dependency-names)
                            `((,name)))))])))

(define (package->derivation package package-dictionary)
  (letrec [(name (hash-ref package 'name))
	   (url (hash-ref package 'source))
	   (sha1 (hash-ref package 'checksum))
           (dependency-names (remove* '("racket")  ; racket may or may not be in here
                                      (map dependency-name
                                           (hash-ref package 'dependencies))))]
    (format derivation-template name url sha1
            (string-join (cons "racket" dependency-names))  ; racket needs to be in here
            (string-join   ; no racket here
             (map install-dep (apply append (map (lambda (name) (name->transitive-dependency-names name package-dictionary))
                                                   dependency-names)))
             (format "~n")))))

(define (package->derivation-and-deps package package-dictionary)
  (letrec [(name (hash-ref package 'name))
	   (url (hash-ref package 'source))
	   (sha1 (hash-ref package 'checksum))
           (dependency-names (remove* '("racket")
                                      (map dependency-name
                                           (hash-ref package 'dependencies))))]
    (string-append (dependency-names->let-deps dependency-names package-dictionary) (package->derivation package package-dictionary))))

(define (name->derivation-and-deps package-name (package-dictionary (make-hash)))
  (let [(package (memo-lookup-package package-dictionary package-name))]
    (package->derivation-and-deps package package-dictionary)))

(let [(package-name (read-line (current-input-port) 'any))]
  (display (string-append (header) (name->derivation-and-deps package-name) (format "~n"))))
