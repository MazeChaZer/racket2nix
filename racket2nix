#! /usr/bin/env racket
#lang racket
(require pkg/lib)

(define header-template #<<EOM
{ pkgs ? import <nixpkgs> {}
, stdenv ? pkgs.stdenv
, fetchurl ? pkgs.fetchurl
, racket ? pkgs.racket
, racket-lib ? racket
, unzip ? pkgs.unzip
}:


EOM
)

(define install-dep-template #<<EOM
    raco pkg install --deps fail --scope-dir $out/share/racket/pkgs ${~a.out}/share/racket/pkgs/~a
EOM
)

(define (install-dep dep-name)
  (format install-dep-template dep-name dep-name))

(define derivation-template #<<EOM
stdenv.mkDerivation rec {
  name = "~a";
  src = fetchurl {
    url = "~a";
    sha1 = "~a";
  };

  buildInputs = [ unzip ~a ];

  unpackPhase = "unzip $src -d $name";

  dontBuild = true;

  inherit racket;

  installPhase = ''
    # TODO: Tell racket not to keep a collection path in \$HOME/.racket
    export PLTUSERHOME=\$PWD

    # Install deps
~a
    raco pkg install --copy --deps fail --scope-dir $out/share/racket/pkgs ./$name
  '';
}
EOM
)

(define (header) header-template)

(define (dependency-name pair-or-string)
  (if (pair? pair-or-string)
      (car pair-or-string)
      pair-or-string))

(define (dependency-names->let-deps unfiltered-dependency-names)
  (let [(dependency-names (remove* '("racket-lib")  ; This is bootstrapped in racket itself
                                   unfiltered-dependency-names))]
    (if (null? dependency-names)
      ""
      (format
       "let~n~a~nin~n"
       (string-join
        (let loop [(rest-dependency-names dependency-names)
                   (let-deps '())]
          (if (null? rest-dependency-names)
              let-deps
              (let [(name (car rest-dependency-names))
                    (next-rest-dependency-names (cdr rest-dependency-names))]
                (let [(next-let-deps (cons
                                      (format "  ~a = ~a;" name (name->derivation-and-deps name))
                                      let-deps))]
                 (loop next-rest-dependency-names next-let-deps)))))
        (format "~n"))))))

(define (name->transitive-dependency-names package-name)
  (let [(package (get-pkg-details-from-catalogs package-name))]
    (package->transitive-dependency-names package)))

(define (package->transitive-dependency-names package)
  (let [(name (hash-ref package 'name))]
    (if (equal? "racket-lib" name)
        `(,name)
        (apply append
               (append (map name->transitive-dependency-names
                            (remove* '("racket")
                                     (map dependency-name
                                          (hash-ref package 'dependencies))))
                       `((,name)))))))

(define (package->derivation package)
  (letrec [(name (hash-ref package 'name))
	   (url (hash-ref package 'source))
	   (sha1 (hash-ref package 'checksum))
           (dependency-names (remove* '("racket")  ; racket may or may not be in here
                                      (map dependency-name
                                           (hash-ref package 'dependencies))))]
    (format derivation-template name url sha1
            (string-join (cons "racket" dependency-names))  ; racket needs to be in here
            (string-join   ; no racket here
             (map install-dep (apply append (map name->transitive-dependency-names dependency-names)))
             (format "~n")))))

(define (package->derivation-and-deps package)
  (letrec [(name (hash-ref package 'name))
	   (url (hash-ref package 'source))
	   (sha1 (hash-ref package 'checksum))
           (dependency-names (remove* '("racket")
                                      (map dependency-name
                                           (hash-ref package 'dependencies))))]
    (string-append (dependency-names->let-deps dependency-names) (package->derivation package))))

(define (name->derivation-and-deps package-name)
  (let [(package (get-pkg-details-from-catalogs package-name))]
    (package->derivation-and-deps package)))

(let [(package-name (read-line (current-input-port) 'any))]
  (display (string-append (header) (name->derivation-and-deps package-name) (format "~n"))))
