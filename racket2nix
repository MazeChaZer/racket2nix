#! /usr/bin/env racket
#lang racket
(require pkg/lib)

(define header-template #<<EOM
{ pkgs ? import <nixpkgs> {}
, stdenv ? pkgs.stdenv
, fetchurl ? pkgs.fetchurl
, racket ? pkgs.racket
, unzip ? pkgs.unzip
 }:


EOM
)

(define derivation-template #<<EOM
stdenv.mkDerivation rec {
  name = "~a";
  src = fetchurl {
    url = "~a";
    sha1 = "~a";
  };

  buildInputs = [ racket unzip ];

  unpackPhase = "unzip $src -d $name";

  dontBuild = true;

  inherit racket;

  installPhase = ''
    # TODO: Tell racket not to keep a collection path in \$HOME/.racket
    export PLTUSERHOME=\$PWD

    # Grandfather in the racket-lib bundled in racket
    raco pkg install --deps fail --scope-dir $out/share/racket $racket/share/racket/pkgs/racket-lib

    # TODO: Pull in racket dependencies
    # for dep in $racketInputsMaybeInTopoOrder; do
    #   raco pkg install --deps fail --scope-dir $out/share/racket $racket/share/racket/somethingsomething
    # done

    raco pkg install --copy --deps fail --scope-dir $out/share/racket ./$name
  '';

}

EOM
)

(define (header) header-template)

(define (derivation package-name)
  (letrec [(package (get-pkg-details-from-catalogs package-name))
	   (name (hash-ref package 'name))
	   (url (hash-ref package 'source))
	   (sha1 (hash-ref package 'checksum))]
    (format derivation-template name url sha1)))

(let [(package-name (read-line (current-input-port) 'any))]
  (display (string-append (header) (derivation package-name))))
