#! /usr/bin/env racket
#lang racket

(require pkg/lib)

(define *ep (current-error-port))

(define header-template #<<EOM
{ pkgs ? import <nixpkgs> {}
, stdenv ? pkgs.stdenv
, fetchurl ? pkgs.fetchurl
, racket ? pkgs.racket
, racket-lib ? racket
, unzip ? pkgs.unzip
}:


EOM
  )

(define derivation-template #<<EOM
stdenv.mkDerivation rec {
  name = "~a";
  src = fetchurl {
    url = "~a";
    sha1 = "~a";
  };

  buildInputs = [ unzip ~a ];

  unpackPhase = "unzip $src -d $name";

  dontBuild = true;

  racket-cmd = "${racket.out}/bin/racket -G $out/etc/racket -U -X $out/share/racket/collects -S ${racket.out}/share/racket/collects";
  raco = "${racket-cmd} ${racket.out}/share/racket/collects/raco/main.rkt";

  installPhase = ''
    mkdir -p $out/etc/racket $out/share/racket
    cat > $out/etc/racket/config.rktd <<EOF
#hash(
  (share-dir . "$out/share/racket")
  (links-search-files . ( ~a ))
  (pkgs-search-dirs . ( ~a ))
  (absolute-installation . #t)
  (installation-name . ".")
)
EOF
    echo ${racket-cmd}
    ${racket-cmd} -e '
(require setup/dirs)
(for [(expr `((current-library-collection-links)
              (find-library-collection-links)
              (find-links-file)
              (current-library-collection-paths)
              (find-library-collection-paths)
              (find-pkgs-dir)
              (get-pkgs-search-dirs)))]
  (display (format "~~a: ~~a~~n" expr (eval expr))))
'
    # install and link us
    ${racket-cmd} -e "(require pkg/lib) (exit (if (member \"$name\" (installed-pkg-names #:scope (bytes->path (string->bytes/utf-8 \"${_racket-lib.out}/share/racket/pkgs\")))) 0 1))" ||
      ${raco} pkg install --copy --deps fail --fail-fast --scope installation ./$name
  '';
}
EOM
  )

(define (derivation name url sha1 dependency-names)
  ; racket needs to be in here
  (define build-inputs
    (string-join
      (cons "racket"
        (for/list ((name dependency-names))
                  (format "_~a" name)))))
  (define link-dirs
    (string-join
      (for/list ((name dependency-names))
                (format "\"${_~a.out}/share/racket\"" name))))
  (define pkg-dirs
    (string-join
      (for/list ((name dependency-names))
                (format "\"${_~a.out}/share/racket/pkgs\"" name))))


  (format derivation-template name url sha1 build-inputs link-dirs pkg-dirs))

(define (header) header-template)

(define (memo-lookup-package package-dictionary package-name)
  (hash-ref! package-dictionary package-name
             (lambda () (hash-copy (get-pkg-details-from-catalogs package-name)))))

(define (dependency-name pair-or-string)
  (if (pair? pair-or-string)
      (car pair-or-string)
      pair-or-string))

(define (names->let-deps ns package-dictionary)
  ; This is bootstrapped in racket itself
  (define names
    (for/list ((name (remove* '("racket-lib") ns)))
      (format "  _~a = ~a;" name (name->derivation name package-dictionary))))
  (define names-on-lines
    (string-join (cons (format "  _racket-lib = racket-lib;") names) (format "~n")))
  (format "let~n~a~nin~n" names-on-lines))

(define (name->transitive-dependency-names package-name package-dictionary (breadcrumbs '()))
  (cond
    [(member package-name breadcrumbs) '()]
    [else
     (define package (memo-lookup-package package-dictionary package-name))
     (hash-ref!
      package
      'transitive-dependency-names
      (lambda ()
        (cond
          [(member package-name '("racket-lib")) (list package-name)]
          [else
           (display (format "evaluating deps of ~a~n" package-name) *ep)
           (define new-crumbs (cons package-name breadcrumbs))
           (define dependency-names
             (package->transitive-dependency-names package package-dictionary new-crumbs))
           (display (format "deps of ~a: ~a~n" package-name dependency-names) *ep)
           dependency-names])))]))

(define (lists->unique-elements ls)
  (reverse (lists->reverse-unique-elements ls)))

(define (lists->reverse-unique-elements ls)
  (let loop [(lists ls) (reverse-unique-elements '())]
    (cond
      [(null? lists) reverse-unique-elements]
      [(null? (car lists)) (loop (cdr lists) reverse-unique-elements)]
      [else
       (define element (caar lists))
       (define rest-first (cdar lists))
       (if (member element reverse-unique-elements)
           (loop (cons rest-first (cdr lists)) reverse-unique-elements)
           (loop (cons rest-first (cdr lists)) (cons element reverse-unique-elements)))])))



(define (package->transitive-dependency-names package package-dictionary breadcrumbs)
  (define name (hash-ref package 'name))
  (define dep-names (map dependency-name (hash-ref package 'dependencies)))
  (define dependency-names (remove* '("racket") dep-names))
  (cond
    [(check-duplicates (append breadcrumbs dependency-names))
     (display (format "~a: one of ~a was in ~a~n" name breadcrumbs dependency-names) *ep)
     ; we also trigger on duplicates in the direct deps, so clean those
     (define dup-free-deps (remove-duplicates dependency-names))
     ; break circular dependencies:
     (hash-set! package 'dependencies (remove* breadcrumbs dup-free-deps))  
     (display (format "~a: let's try again with ~a~n" name (hash-ref package 'dependencies)) *ep)
     (package->transitive-dependency-names package package-dictionary breadcrumbs)]
    [else
     (define name-lists
       (for/list ((name dependency-names))
         (name->transitive-dependency-names name package-dictionary breadcrumbs)))
     (append (remove-duplicates (append* name-lists)) (list name))]))

(define (name->derivation package-name package-dictionary)
  (define package (memo-lookup-package package-dictionary package-name))
  (display (format "Create derivation for ~a~n" package-name) *ep)
  (package->derivation package package-dictionary))

(define (package->derivation package package-dictionary)
  (define name (hash-ref package 'name))
  (define url (hash-ref package 'source))
  (define sha1 (hash-ref package 'checksum))
  (define dep-names (map dependency-name (hash-ref package 'dependencies)))
  ; racket may or may not be in here
  (define dependency-names (remove* '("racket") dep-names))
  (define trans-dep-names
    (append*
      (for/list ((name dependency-names))
        (name->transitive-dependency-names name package-dictionary))))
  (derivation name url sha1 trans-dep-names))

(define (name->let-deps-and-reference package-name (package-dictionary (make-hash)))
  (define package-names (name->transitive-dependency-names package-name package-dictionary))
  (define package-definitions (names->let-deps package-names package-dictionary))
  (string-append package-definitions (format "_~a~n" package-name)))

(define package-name (read-line (current-input-port) 'any))
(display (string-append (header) (name->let-deps-and-reference package-name)))
